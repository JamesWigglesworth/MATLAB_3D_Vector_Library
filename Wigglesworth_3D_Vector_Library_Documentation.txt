# MATLAB_3D_Vector_Library Documentation
I did a lot of 3D vector math for my Master's Thesis. 
This is a collection of the functions I used most.
I tried to keep the names as descriptive as possible.

Please let me know if you find any bugs and feel free to add your own functions!




v_angle(vector_1, vector_2)
  Calculates the smallest angle between to 3D vectors
  Example 1:
    v_angle([1, 0, 0], [0, 0, 1]) 
    returns 90
  
  
v_angles_to_DCM(angles, sequence)
  Converts three euler angles to a direct cosine matrix
  The sequence variable is a string that dictates the order of rotations
  where X means rotation about the original X axis
  and X' means rotation about the transformed X axis
  sequence is defaulted to 'ZY''Z'' only because it's the sequence my robotic arm used.
  Example 1:
    v_angles_to_DCM([30, 0, 0], 'XYZ')
    returns [1,     0,     0;
             0, 0.707, 0.707;
             0, -0.707, 0.707]


v_are_equal(vector_1, vector_2, decimal_places)
  Returns true if vectors are equal size and all elements are equal with the specified number of decimal_places
  decimal_places is defaulted to 14
  Example 1: 
    v_are_equal([1, 2, 3], [1, 2, 3])
    returns true
  Example 2: 
    v_are_equal([1, 2, 4], [1, 2, 3])
    returns false
  Example 2: 
    v_are_equal([1, 2, 3], [1.000000001, 2, 3], 5)
    returns true
    
    
[uL1, uL2, alpha, beta] = v_closest_points_between_two_lines( u1, v1, u2, v2)
 Finds the two points that lie on the lines that are the closest to eachother.
  If the lines intersect then the two points will be equal.
  This is useful when there are two 3D lines that are supposed to intersect but may have some error
  Example 1:
    [uL2, uR2, alpha, beta] = v_closest_points_between_two_lines([0, 0, 0], [1, 0, 0], [1, 2, 3], [0, 1, 0])
    uL2: [1, 0, 0]
    uR2: [1, 0, 3]
    alpha: 1
    beta: -2


v_dist_point_to_line(point, line_point_A, line_point_B)
  Calculates the minimum distance between a point and a line
  Example 1:
  v_dist_point_to_line([1, 0, 2], [0, 0, 0], [0, 0, 1])
  returns 1


v_dist_point_to_plane()
  Calculates the minimum distance between a point and a plane
  This is distance is signed meaning if the point is in the direction 
  of the plane normal it is positive if not it is negative
  Example 1:
    v_dist_point_to_plane([1, 2, 3], [0, 0, 1], [4, 5, 6])
    returns 3
  Example 2:
    v_dist_point_to_plane([1, 2, 3], [0, 0, -1], [4, 5, 6])
    returns -3


v_distance_point_to_point(point_1, point_2)
  Calculates the distance between two points
  Example 1:
    v_distance_point_to_point([1, 2, 3], [4, 6, 15])
    returns 13


[x, y, R] = v_fit_circle_2D(XY)
  Calculates the circle of best fit from the XY data
  Returns the position of the center, x and y, and the radius, R
  Takes a minimum of three xy points
  This code was written by V. Pratt
  Example 1:
    v_fit_circle_2D([1, 0; 0, 1; -1, 0])
    returns [0, 0, 1]


[center_point_3D, normal, radius, plot_points_3D, points_2D, center_point_2D, plot_points_2D] = v_fit_circle_3D()
  Calculates the circle of best fit from XYZ data
  This is done by first fitting a plane to the data, projecting the points onto the plane,
  transforming the plane from 3D to 2D, then fitting a 2D circle to the 2D points
  the returned args, center_point, normal, and radius are the essential return values
  the other return values are mainly for plotting purposes
  Example 1:
  input_points = [0, 0, 0; 1, 2, 3; 1, -2, 3];
  [center_point_3D, normal, radius, plot_points_3D, points_2D, center_point_2D, plot_points_2D] = v_fit_circle_3(input_points);
  figure(1)
  cla
  hold on
  grid on
  set(gca, 'DataAspectRatio', [1 1 1])
  plot3(plot_points_3D(:,1), plot_points_3D(:,2), plot_points_3D(:,3),'k-')
  plot3(center_point_3D(1), center_point_3D(2), center_point_3D(3), 'k*')
  plot3(input_points(:,1), input_points(:,2), input_points(:,3), 'k*')
  quiver3(center_point_3D(1), center_point_3D(2), center_point_3D(3), normal(1), normal(2), normal(3), 'k')
  figure(2)
  cla
  hold on
  set(gca, 'DataAspectRatio', [1 1 1])
  plot(plot_points_2D(:,1), plot_points_2D(:,2), 'k-')
  plot(center_point_2D(1), center_point_2D(2), 'k*')
  plot(points_2D(:,1), points_2D(:,2), 'k*')
  returns:
    center_point_3D: [0.7, 0, 2.1]
    normal: [0.9487, 0, -0.3162]
    radius: 2.2136

  
v_get_DCM_from_pose(pose)
  Pulls the 3x3 matrix, representing the direct cosine matrix, from the pose
  Example 1:
    v_get_DCM_from_pose([1, 0, 0, 1; 0, 1, 0, 2; 0, 0, 1, 3; 0, 0, 0, 1])
    returns: [1, 0, 0; 0, 1, 0; 0, 0, 1]


v_get_point_from_pose(pose)
  Pulls the point from the pose
  Example 1:
    v_get_point_from_pose([1, 0, 0, 1; 0, 1, 0, 2; 0, 0, 1, 3; 0, 0, 0, 1])
    returns: [1, 2, 3]


v_magnitude(vector)
  Calculates the magnitude of a vector
  Example 1:
    v_magnitude([3, 4, 12])
    returns: 13


v_make_pose(position, orientation, sequence)
  Generates a pose which is a 4x4 matrix with the form [R, P; 0, 1]
  Where R is a 3x3 orientation rotation matrix
  P is a 3x1 position vector
  Both arguments can be defaulted
  position defaults to [0, 0, 0]
  orientation defaults to a 3x3 identity matrix
  orientation can also be in the form of 3 euler angles using the sequence argument
  Example 1:
    v_make_pose()
    returns: [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1]
  Example 2:
    v_make_pose([1, 2, 3])
    returns: [1, 0, 0, 1; 0, 1, 0, 2; 0, 0, 1, 3; 0, 0, 0, 1]
  Example 3:
    v_make_pose([1, 2, 3], [90, 0, 0])
    returns: [1, 0, 0, 1; 0, 0, 1, 2; 0, -1, 0, 3; 0, 0, 0, 1]
  Example 4:
    v_make_pose([1, 2, 3], [1, 0, 0; 0, 0, 1; 0, -1, 0])
    returns: [1, 0, 0, 1; 0, 0, 1, 2; 0, -1, 0, 3; 0, 0, 0, 1]
  

v_normalize(vector)
  returns a vector in the same direction but with a magnitude of 1
  Example 1:
    v_normalize([1, 1, 0])
    returns: [0.7071, 0.7071, 0]


[normal, basis, point] = v_plane_fit(points)
  Calculates a plane of best fit for a set of 3D dimensional points
  Returns the normal of the plane, a point that lies in the plane and 
  a possible set of xy vectors that could lie in the plane
  Note: the normal and basis need to be transposed to work with the other functions
  Code written by Adrien Leygue
  Example 1:
    input_points = [0, 0, 0; 1, 2, 3; 1, -2, 3]
    [normal, basis, point] = v_plane_fit(input_points)
    figure(1)
    cla
    hold on
    grid on
    set(gca, 'DataAspectRatio', [1 1 1])
    plot3(point(1), point(2), point(3),'k*')
    quiver3(point(1), point(2), point(3), normal(1), normal(2), normal(3), 'b')
    quiver3(point(1), point(2), point(3), basis(1,1), basis(2,1), basis(3,1), 'r')
    quiver3(point(1), point(2), point(3), basis(1,2), basis(2,2), basis(3,2), 'g')
    plot3(input_points(:,1), input_points(:,2), input_points(:,3),'k*')
    returns:
      normal: [0.9487; 0; -0.3162]
      basis: [0.3162, 0; 0 1; 0.9487 0]
      point: [0.6667 0, 2]
    
    
[d, point] = v_plane_line_intersection(plane_norm, plane_point, line_norm, line_point)
  Finds the point where the line and plane intersect
  Returns the distance along the line and the point of intersection
  Example 1:
    [d, point] = v_plane_line_intersection([0, 0, 1], [0, 0, 5], [0, 0, 1], [1, 2, 3])
    Results:
      d: 2
      point: [1, 2, 5]


v_plot_plane()
v_plot_pose()
v_project_vector_onto_plane()
v_rotate()
v_rotate_DCM()
v_signed_angle()
  
    
